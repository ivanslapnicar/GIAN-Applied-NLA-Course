### A Pluto.jl notebook ###
# v0.10.0

using Markdown

# ╔═╡ 1f472327-7696-4070-877b-36fa00b32d11
md"""
# Lightning Round - Basic Features and Commands 

---

In this notebook, we go through basic constructs and commands.

## Competences 

The user should know to start `Julia` in various modes (command line prompt, `IJulia`), how to exit, learn some features and be able to write simple programs.

## Credits

This notebook is based on the [slides](https://github.com/JuliaLang/julia-tutorial/tree/master/LightningRound) accompanying  the Lightning Round [video]( https://www.youtube.com/watch?v=37L1OMk_3FU&feature=player_embedded#at=33) by [Alan Edelman](http://www-math.mit.edu/~edelman/index.php), all part of the [Julia Tutorial](https://github.com/JuliaLang/julia-tutorial).
"""

# ╔═╡ 5d1910ad-80e4-4ea0-972f-3cb47ae7f057
md"""
## Julia resources

Julia resources are accessible through the [Julia home page](http://julialang.org).

Please check `packages`, `docs` and `juliacon` (_here you will also find links to videos from previous conferences_).

"""

# ╔═╡ 3275dbbd-8612-4395-adb9-1318cc85d136
md"""
## Execution
To execute cell use `Shift + Enter` or press `Play` (__Run cell__).

To run all cells in the notebook go to `Cell` -> `Run All` 
"""

# ╔═╡ 8f8e9dba-72ba-41e1-b39a-aeef95402555
md"""
## Markdown cells

Possibility to write comments / code / formulas in `Markdown` cells, makes Jupyter notebooks ideal for teaching and research. Text is written using _Julia Markdown_, which is _GitHub Markdown_ with additional understanding of basic `LaTeX`.

[Mastering (GitHub) Markdown](https://guides.github.com/features/mastering-markdown/) is a 3-minute read, another short and very good manual is at http://daringfireball.net/projects/markdown/.

Some particulars of Julia Markdown are described in 
[Documentation](http://docs.julialang.org/en/release-0.4/manual/documentation/) section of Julia Manual, yet another 3-minute read.
"""

# ╔═╡ efda0e73-dc73-461c-a43c-895eb14a30ff
md"""
## `nbconvert`

It is extremely easy to convert notebooks to slides, LaTeX, or PDF.
For details see the 
[documentation](https://nbconvert.readthedocs.org/en/latest/usage.html).

### Slides

Clicking `View` -> `Cell Toolbar` -> `Slideshow` opens the `Slide Type` menu for each cell.

The slideshow is made with the command

`jupyter nbconvert --to slides notebook.ipynb`

The slideshow is displayed in browser with the command

`jupyter nbconvert --to slides --post serve notebook.ipynb`


### LaTeX

`jupyter nbconvert --to latex notebook.ipynb`

###  PDF 

`jupyter nbconvert --to PDF notebook.ipynb`

N.B. For the above conversions [Pandoc](http://pandoc.org/installing.html) needs to be installed.
"""

# ╔═╡ d9196675-4ec2-4236-a7f1-bcc589e234ab
md"""
## Which version of `Julia` is running?
"""

# ╔═╡ 4f2aee7c-6e08-404c-a561-18f1662e5837
versioninfo()

# ╔═╡ b46be41b-edc5-4321-850c-ecb82e13ac7a
md"""
## Quitting

__Exiting__ from `julia>` or __restarting kernel__ in `IJulia`
"""

# ╔═╡ dbc23df0-c4f0-4efc-a452-3392e0a18bf1
# exit()

# ╔═╡ bea9562f-e0d6-4725-994f-ff9f45830d25
md"""
## Documentation

Documentation is well written and the starting point is http://docs.julialang.org/en/latest/

But, also remeber that `Julia` is __open source__ and all routines are available on [GitHub](http://github.com). You will learn how to make full use of this later in the course.
"""

# ╔═╡ 9779cbcd-d500-4383-a7e3-ff909837aaa6
md"""
## Punctuation review

* `[...]` are for indexing, array constructors and __Comprehensions__
* `(...)` are __required__ for functions `quit()`, `tic()`, `toc()`, `help()` 
* `{...}` are for arrays
* `#` is for comments
"""

# ╔═╡ 2b973dd0-1e52-44c9-bf22-be092080fa3e
md"""
## Basic indexing
"""

# ╔═╡ 334ea76b-a126-41b0-8945-ba166507b0a1
# Matrix with random entries between 0 and 1
A=rand(5,5)

# ╔═╡ 9ee1a335-8060-4c6c-b1c6-4e1699053086
A[1,1]

# ╔═╡ 9293e691-1b04-4989-a891-fbd1bd3306fe
# You can index into output directly
rand(5,5)[1:2,3:4]

# ╔═╡ 2d16ab49-9244-4ef6-b5e0-fa5304b367e4
md"""
### Indexing is elegant

If you want to compute the lower right $2\times 2$ block of $A^{10}$, in most languages you need to first compute $B=A^{10}$ and then index into $B$. In Julia, the command is simply
"""

# ╔═╡ 9e98e5ce-3ca2-4bf8-84f1-23dc3e793b9e
(A^10)[4:5,4:5] # Parenthesses around A^10 are necessary

# ╔═╡ 6acd3389-37b1-48a7-9a04-795372503bac
md"""
### Comprehensions - elegant array constructors
"""

# ╔═╡ 2078e00d-b3b2-4188-b5be-9835de2ab357
[i for i=1:5]

# ╔═╡ c75546c0-47ae-4706-9a73-aad97700584d
[trace(rand(n,n)) for n=1:5]

# ╔═╡ 0bc90ce5-9976-498d-930c-e34fea9c7193
x=1:10

# ╔═╡ 3d949c09-801b-434d-a972-f590e8de8704
[ x[i]+x[i+1] for i=1:9 ]

# ╔═╡ 963ea673-6469-4718-b348-a281578c7742
z = [eye(n) for n=1:5]  # z is Array of Arrays

# ╔═╡ ae3fb606-c31d-4edd-9d4c-4c3982c86be4
# First element is a 1x1 Array
z[1] 

# ╔═╡ e4790db9-99ee-4200-bc30-d80d0494f23f
# What is the fourth element?
z[4]

# ╔═╡ 9efef8f4-130b-4286-b109-a43e47a1d00b
# Another example of a comprehension
A=[ i+j for i=1:5, j=1:5 ]

# ╔═╡ b80eb1ee-0d74-47fe-8fbf-87140fad8e7c
# Notice the promotion
B=[ i+j for i=1:5, j=1.0:5 ]

# ╔═╡ de3245f1-8b93-4e9e-be8c-76f7f096907f
md"""
## Commands `ndims()` and `typeof()`
"""

# ╔═╡ 6cc8eb48-4dbb-4599-b126-b4b89f8376de
ndims(ans)

# ╔═╡ cdff612c-ad32-4fc8-aa11-d4501f490f05
# z is a one-dimensional array
ndims(z)

# ╔═╡ 4725ae25-0800-442e-88b5-19243da2a3e9
# Array of Arrays
typeof(z)

# ╔═╡ 48da687f-935d-4262-ad0a-f5e8f334da9a
# z[5] is a two-dimensional array
typeof(z[5])

# ╔═╡ 0a918be5-070d-4f41-a09d-dc5d3238189b
typeof(A)

# ╔═╡ 84e88328-de83-49ed-89f8-f9ba13f1ea52
md"""
## Vectors are 1-dimensional arrays

See [Multi-dimensional arrays](https://docs.julialang.org/en/latest/manual/arrays/#man-multi-dim-arrays-1) for more.
"""

# ╔═╡ a232e8d5-1a28-4a85-9cd4-e58bb79b77a0
v=rand(5,1) # This is 2-dimensional array

# ╔═╡ 851065e9-d701-46ae-9f22-d6ef0975694f
vv=vec(v) # This is an 1-dimensional array or vector

# ╔═╡ 029ac818-a082-4454-98fc-b4a9b94b719a
v==vv  # Notice that they are different

# ╔═╡ af54e7ef-3512-4cdf-bea5-e7848299638d
v-vv # Again a promotion

# ╔═╡ a5268ef8-425e-4b8a-b62a-44af4a4993b7
w=rand(5) # This is again a vector

# ╔═╡ 24dcfabb-b9a1-4c60-afe2-2b29ab653b6d
Mv=[v w] # First column is a 5 x 1 matrix, second column is a vector of length 5

# ╔═╡ 59bebc62-f680-4d08-9ed9-febe8d8e58d6
x=Mv[:,1] # Matrix columns are extracted as vectors

# ╔═╡ 270b5108-2f91-497e-9f01-187c8c3f4d6a
y=Mv[:,2]

# ╔═╡ eb2954a3-b774-45bb-9776-8015daed12e1
x==v # The types differ

# ╔═╡ 7ad96bf2-08c4-43e7-8d79-5aecc90ff9d8
y==w

# ╔═╡ 1d361187-3759-41a0-9760-a234bfc054f1
# Transpose of a matrix is a matrix
v'

# ╔═╡ 0dd59a04-f872-4c56-8a99-d586086b5802
# Transpose of a vector is a RowVector
w'

# ╔═╡ 5cb26aec-503d-4b62-87aa-6d695a2e7c31
md"""
### 1D and 2D arrays
"""

# ╔═╡ c5552f19-1f48-4910-bf92-ef4d1816fcba
w=1.0:5

# ╔═╡ 29d32710-3f61-4dad-b1a2-41cca022de6c
A*w

# ╔═╡ 5a89699f-e40f-49a0-ae31-561466963ce3
w=collect(1.0:5) 

# ╔═╡ 19c4f76b-a9f2-4c78-b0a3-0f2bf3109b6f
A*w  # This returns a 1-dimensional array

# ╔═╡ d31925e5-5c02-4386-8181-d308b3f937f4
A*v # This returns a 2-dimensional array - v is a 5 x 1 array

# ╔═╡ ff687faf-c68d-48be-8733-f346c44bde12
md"""
## Discussion

Such behavior is due to the fact that `Julia` has vectors as a special type. __ Pros? Cons? __
 
What is matrix $\times$ vector?

What is the result of 

$$ C[i,j]=A[i,:]*B[:,j]$$
"""

# ╔═╡ c919d9d4-079e-490a-b858-762bac13c648
B=[A[i,:]*A[:,j] for i=1:5, j=1:5]

# ╔═╡ b5263af0-bd84-4086-9481-eaf9e8b6d402
# Rows and columsn are both 1D vectors - must use dot product
B=[A[i,:]⋅A[:,j] for i=1:5, j=1:5]

# ╔═╡ 19abf655-4f37-44aa-9557-e776fb9e5392
inv(B)

# ╔═╡ 30e36ce9-896c-4714-b82c-17736ed6b508
md"""
## `ones()`, `eye()` and `zeros()`
   
Notice that the output type depends on the argument. This is a general Julia feature called `Multiple dispatch` 
and will be explained later in more detail. 
"""

# ╔═╡ 91294cdb-1bd9-4e36-8244-19ed3f3d9101
# The output type depends on the argument. Float64 is the default.
ones(3,5), ones(5), ones(rand(1:3,4,6)) 

# ╔═╡ 9e986ae4-78f9-4d98-9e4e-e08e89304256
rand(1:3,4,6)

# ╔═╡ d46bd8e2-0c27-4e76-98a8-85d73940ff92
zeros(3,5)

# ╔═╡ f3253ec4-3aaa-4b51-bded-4c37b17e6208
zeros(5)

# ╔═╡ ff5770c7-8c09-4d10-9a6a-18f75bd74071
zeros(rand(1:3,4,6))

# ╔═╡ 9e0f50b6-616c-42d7-a878-7c55ee7c225e
eye(4)

# ╔═╡ 6e993836-556d-48fc-938c-e98b0ac94fce
eye(Int,4)

# ╔═╡ 67446e91-015f-4bbd-a50e-92526c2c3f23
eye(Int32,4)

# ╔═╡ 71a03b51-bb1f-4e94-a0de-6a544d1121df
complex(eye(4)) 

# ╔═╡ 1a6706f5-d464-4b4d-856a-c969aadd44e1
md"""
## Complex numbers

`i` is too valuable symbol for loops, so Julia uses `im` for the complex unit. 
"""

# ╔═╡ 72faab81-f1ce-4d66-9b4d-348abaecd87d
im

# ╔═╡ 8a6ddee3-9f38-4074-83cf-64e919d2ba2e
2im

# ╔═╡ 691bd242-20b3-4648-945e-42d84cf487ab
typeof(ans)

# ╔═╡ 8d62321c-985e-4399-9ea7-d89c04b430ac
typeof(2.0im)

# ╔═╡ 809b89d6-7868-4ca3-8012-ffd10aca0cd7
# Another way of defining complex numbers
complex(3,4)

# ╔═╡ c5b96be9-2b53-4cbc-aad4-2b0ef59b84df
# If one of the arguments if Float64, so is the 
# entire number - promotion!
complex(3,4.0)

# ╔═╡ e71d851f-89e9-4c4a-9e41-0c4f0a517013
# This produces an error (like in any other language)
sqrt(-1) 

# ╔═╡ 13761e35-aeff-4463-8a3a-3be47262b889
# and this is fine.
sqrt(complex(-1))

# ╔═╡ 37c50436-f17c-4cbe-a8cd-41cc48555596
md"""
## Ternary operator
Let us define our version of the sign function
"""

# ╔═╡ 8c7c1862-4a10-498d-a4aa-bcd0ac00ad62
si(x) = (x>0) ? 1 : -1

# ╔═╡ 7f606319-7cbc-4338-9fcd-c00a5f6a32f0
si(-13)

# ╔═╡ d35fefc3-a529-4021-a91a-08bc5bf80ebb
md"""
This is equivalent to:
"""

# ╔═╡ d986ebe2-76ec-42bf-8c6e-d486841fbe36
function si(x)
    if x>0
        return 1
    else
        return -1
    end
end

# ╔═╡ 634626ed-739d-4900-b639-b1447ec9ee43
si(pi-8), si(0), si(0.0)

# ╔═╡ f9968b8a-6474-4f1c-b65c-e0bc2187a70e
md"""
The expressions can be nested:
"""

# ╔═╡ 3a1e5e6a-6235-498c-a3e4-c19e4536d63d
# now si(0) is 0
si(x) = (x>0) ? 1 : ((x<0) ? -1: 0)

# ╔═╡ 1a842df8-274a-4ed9-afa7-c1c7430f9283
# '\pi Tab' produces π and means π
si(π-8), si(0)

# ╔═╡ 28455bbd-5bfc-4f98-be4f-c26311f7e327
md"""
## Typing
Special mathematical (LaTeX) symbols can be used (like $\alpha$, $\Xi$, $\pi$, $\oplus$, $\cdot$, etc.). The symbol in both, the notebook and command line version, is produced by writing 
LaTeX command followed by `<Tab>`.
    
Subscripts and superscripts are written as e.g., x\_m`<TAB>`, x\^3`<TAB>`.
"""

# ╔═╡ 312bff26-67c8-4b5c-b61f-b8d66ece718a
Ξ = 8; Ψ  = 6; Γ = Ξ ⋅ Ψ

# ╔═╡ f0c39851-7ac9-4959-a48e-2612211de173
typeof(Γ)

# ╔═╡ a1b56d48-45c2-4483-81bb-f5829ff10e7e
ω₁=7; xᵏ=23
ω₁*xᵏ

# ╔═╡ 6394216f-fcae-4dc8-8420-432d0b273621
md"""
## Writing a program and running a file

Special feature of Julia is that the results of commands are not displayed, unless explicitely required. 

To display results you can use commands `@show` or `println()` (or many others, see the [Text I/O](http://julia.readthedocs.org/en/latest/stdlib/base/?highlight=print#text-i-o) in the manual.)

Consider the file `deploy.jl` with the following code
```julia
n=int(ARGS[1])          # take one integer argument
println(rand(1:n,n,n))  # generate and print n x n matrix of random integers between 1 and n
@show b=3               # set b to 3 and show the result
c=4                     # set c to 4
```
Running the program in the shell gives
```julia
$ julia deploy.jl 5
[1 3 2 4 1
 5 3 1 1 4
 5 4 2 2 5
 3 1 2 3 4
 4 4 5 4 4]
b = 3 => 3
```
Notice that the result of the last command (_c_) is not displayed.

>You can, of course, also run the above command in the `Console` tab of `JuliaBox`. To do this, you first have to change the directory
```
cd Julia-Course/src
```

Similarly, the program can be converted to executable and run directly, 
without referencing `julia` in the command line.
The refernece to `julia` must be added in the first line, as in the file `deploy1.jl`:
```julia
#!/usr/bin/julia
n=int(ARGS[1])
println(rand(1:n,n,n))
@show b=3
c=4
```
In the shell do:
```
$ chmod +x deploy1.jl
$ ./deploy1.jl 5
[4 5 3 2 5
 4 2 1 5 1
 3 2 4 5 1
 2 4 4 3 1
 3 4 5 3 3]
b = 3 => 3
```
Finally, to run the same program in `julia` shell or `IJulia`, the input has to be changed, as in the file `deploy2.jl`:
```julia
n=int(readline(STDIN))
println(rand(1:n,n,n))
@show b=3
c=4
```
__Notice that now the result of the last line is displayed by default__  - in this case it is `4`, the values of `c`. The output of the random matrix and of `b` is forced.
"""

# ╔═╡ b74c8fa5-69d7-42eb-9964-ea7186742960
include("deploy2.jl")

# ╔═╡ 97de847a-2457-47f1-96a2-6f1214e81a5e
md"""
## Running external programs and unix pipe

### `run()` - calling external program
"""

# ╔═╡ 4dcc65f3-d221-4170-b604-f16b9d8d4fd6
?run

# ╔═╡ 67d1137f-146b-49bd-94cb-cc666102cb15
md"""
Notice, that this is not a gret help, Julia has much better commands for this.
"""

# ╔═╡ 6f06c3c6-53e2-4374-aeaa-fbcad7db7204
# This calls the unix Calendar program
run(`cal`)

# ╔═╡ fe3af7f1-bde9-4a27-99b6-665386b38af9
# The pipe is '|>' instead of usual '|'
run(pipeline(`cal`,`grep Sa`)) 

# ╔═╡ 081ccb66-0b04-41b1-bae5-9d3e1f9b5c69
md"""
### `ccall()` - calling `C` program
"""

# ╔═╡ b86dc4a6-3ac2-4fb7-97c8-654220ed3df1
?ccall

# ╔═╡ 37e4a4d1-99a7-49ff-8daf-6b204aa4a3b5
# Simple version
ccall(:clock,Int,()) 

# ╔═╡ 91cb0aa8-3c44-4f3d-a6ca-db599da2fa8f
path = ccall((:getenv, "libc"), Cstring, (Cstring,), "SHELL")

# ╔═╡ 241457ec-98aa-4dc7-b647-fa5a2de4b4e3
unsafe_string(path) # Human readable version

# ╔═╡ be526f69-f739-4372-b1c2-23cc252ed865
md"""
## `Task()` and `Channel`
`Julia` has  a control flow feature that allows computations to be suspended 
and resumed in a flexible manner (see
[Tasks](https://docs.julialang.org/en/latest/manual/control-flow/#man-tasks-1) in the manual).
"""

# ╔═╡ 0556e867-84a4-4632-b341-7c16b7fed6a1
function stepbystep(c::Channel)
    put!(c, "start")
    for n=1:3
        put!(c,n^2)    
    end
    put!(c,"stop")
end

# ╔═╡ b6db627a-5f7e-4215-87ed-e9114535945f
c1=Channel(stepbystep)

# ╔═╡ 2b38ad29-7634-43d2-8fd0-b0f6eb48d8f8
take!(c1)

# ╔═╡ 655ee62b-39f9-40cc-999a-6b789582de11
take!(c1)

# ╔═╡ 6b996fea-2c6b-483d-8aaa-7da0e7c72100
take!(c1)

# ╔═╡ a1bc646a-fbe8-4fd8-8d02-254e5dc37ab7
take!(c1)

# ╔═╡ 291a37f7-4e62-4249-ac3c-23ae5081cd43
take!(c1)

# ╔═╡ fabb56ea-369b-4724-9744-ab037627f58e
# Guess what comes next?
take!(c1)

# ╔═╡ 650fe0e7-601c-4534-98c5-071298881484


# ╔═╡ Cell order:
# ╟─1f472327-7696-4070-877b-36fa00b32d11
# ╟─5d1910ad-80e4-4ea0-972f-3cb47ae7f057
# ╟─3275dbbd-8612-4395-adb9-1318cc85d136
# ╟─8f8e9dba-72ba-41e1-b39a-aeef95402555
# ╟─efda0e73-dc73-461c-a43c-895eb14a30ff
# ╟─d9196675-4ec2-4236-a7f1-bcc589e234ab
# ╠═4f2aee7c-6e08-404c-a561-18f1662e5837
# ╟─b46be41b-edc5-4321-850c-ecb82e13ac7a
# ╠═dbc23df0-c4f0-4efc-a452-3392e0a18bf1
# ╟─bea9562f-e0d6-4725-994f-ff9f45830d25
# ╟─9779cbcd-d500-4383-a7e3-ff909837aaa6
# ╟─2b973dd0-1e52-44c9-bf22-be092080fa3e
# ╠═334ea76b-a126-41b0-8945-ba166507b0a1
# ╠═9ee1a335-8060-4c6c-b1c6-4e1699053086
# ╠═9293e691-1b04-4989-a891-fbd1bd3306fe
# ╟─2d16ab49-9244-4ef6-b5e0-fa5304b367e4
# ╠═9e98e5ce-3ca2-4bf8-84f1-23dc3e793b9e
# ╟─6acd3389-37b1-48a7-9a04-795372503bac
# ╠═2078e00d-b3b2-4188-b5be-9835de2ab357
# ╠═c75546c0-47ae-4706-9a73-aad97700584d
# ╠═0bc90ce5-9976-498d-930c-e34fea9c7193
# ╠═3d949c09-801b-434d-a972-f590e8de8704
# ╠═963ea673-6469-4718-b348-a281578c7742
# ╠═ae3fb606-c31d-4edd-9d4c-4c3982c86be4
# ╠═e4790db9-99ee-4200-bc30-d80d0494f23f
# ╠═9efef8f4-130b-4286-b109-a43e47a1d00b
# ╠═b80eb1ee-0d74-47fe-8fbf-87140fad8e7c
# ╟─de3245f1-8b93-4e9e-be8c-76f7f096907f
# ╠═6cc8eb48-4dbb-4599-b126-b4b89f8376de
# ╠═cdff612c-ad32-4fc8-aa11-d4501f490f05
# ╠═4725ae25-0800-442e-88b5-19243da2a3e9
# ╠═48da687f-935d-4262-ad0a-f5e8f334da9a
# ╠═0a918be5-070d-4f41-a09d-dc5d3238189b
# ╟─84e88328-de83-49ed-89f8-f9ba13f1ea52
# ╠═a232e8d5-1a28-4a85-9cd4-e58bb79b77a0
# ╠═851065e9-d701-46ae-9f22-d6ef0975694f
# ╠═029ac818-a082-4454-98fc-b4a9b94b719a
# ╠═af54e7ef-3512-4cdf-bea5-e7848299638d
# ╠═a5268ef8-425e-4b8a-b62a-44af4a4993b7
# ╠═24dcfabb-b9a1-4c60-afe2-2b29ab653b6d
# ╠═59bebc62-f680-4d08-9ed9-febe8d8e58d6
# ╠═270b5108-2f91-497e-9f01-187c8c3f4d6a
# ╠═eb2954a3-b774-45bb-9776-8015daed12e1
# ╠═7ad96bf2-08c4-43e7-8d79-5aecc90ff9d8
# ╠═1d361187-3759-41a0-9760-a234bfc054f1
# ╠═0dd59a04-f872-4c56-8a99-d586086b5802
# ╟─5cb26aec-503d-4b62-87aa-6d695a2e7c31
# ╠═c5552f19-1f48-4910-bf92-ef4d1816fcba
# ╠═29d32710-3f61-4dad-b1a2-41cca022de6c
# ╠═5a89699f-e40f-49a0-ae31-561466963ce3
# ╠═19c4f76b-a9f2-4c78-b0a3-0f2bf3109b6f
# ╠═d31925e5-5c02-4386-8181-d308b3f937f4
# ╟─ff687faf-c68d-48be-8733-f346c44bde12
# ╠═c919d9d4-079e-490a-b858-762bac13c648
# ╠═b5263af0-bd84-4086-9481-eaf9e8b6d402
# ╠═19abf655-4f37-44aa-9557-e776fb9e5392
# ╟─30e36ce9-896c-4714-b82c-17736ed6b508
# ╠═91294cdb-1bd9-4e36-8244-19ed3f3d9101
# ╠═9e986ae4-78f9-4d98-9e4e-e08e89304256
# ╠═d46bd8e2-0c27-4e76-98a8-85d73940ff92
# ╠═f3253ec4-3aaa-4b51-bded-4c37b17e6208
# ╠═ff5770c7-8c09-4d10-9a6a-18f75bd74071
# ╠═9e0f50b6-616c-42d7-a878-7c55ee7c225e
# ╠═6e993836-556d-48fc-938c-e98b0ac94fce
# ╠═67446e91-015f-4bbd-a50e-92526c2c3f23
# ╠═71a03b51-bb1f-4e94-a0de-6a544d1121df
# ╟─1a6706f5-d464-4b4d-856a-c969aadd44e1
# ╠═72faab81-f1ce-4d66-9b4d-348abaecd87d
# ╠═8a6ddee3-9f38-4074-83cf-64e919d2ba2e
# ╠═691bd242-20b3-4648-945e-42d84cf487ab
# ╠═8d62321c-985e-4399-9ea7-d89c04b430ac
# ╠═809b89d6-7868-4ca3-8012-ffd10aca0cd7
# ╠═c5b96be9-2b53-4cbc-aad4-2b0ef59b84df
# ╠═e71d851f-89e9-4c4a-9e41-0c4f0a517013
# ╠═13761e35-aeff-4463-8a3a-3be47262b889
# ╟─37c50436-f17c-4cbe-a8cd-41cc48555596
# ╠═8c7c1862-4a10-498d-a4aa-bcd0ac00ad62
# ╠═7f606319-7cbc-4338-9fcd-c00a5f6a32f0
# ╟─d35fefc3-a529-4021-a91a-08bc5bf80ebb
# ╠═d986ebe2-76ec-42bf-8c6e-d486841fbe36
# ╠═634626ed-739d-4900-b639-b1447ec9ee43
# ╟─f9968b8a-6474-4f1c-b65c-e0bc2187a70e
# ╠═3a1e5e6a-6235-498c-a3e4-c19e4536d63d
# ╠═1a842df8-274a-4ed9-afa7-c1c7430f9283
# ╟─28455bbd-5bfc-4f98-be4f-c26311f7e327
# ╠═312bff26-67c8-4b5c-b61f-b8d66ece718a
# ╠═f0c39851-7ac9-4959-a48e-2612211de173
# ╠═a1b56d48-45c2-4483-81bb-f5829ff10e7e
# ╟─6394216f-fcae-4dc8-8420-432d0b273621
# ╠═b74c8fa5-69d7-42eb-9964-ea7186742960
# ╟─97de847a-2457-47f1-96a2-6f1214e81a5e
# ╠═4dcc65f3-d221-4170-b604-f16b9d8d4fd6
# ╟─67d1137f-146b-49bd-94cb-cc666102cb15
# ╠═6f06c3c6-53e2-4374-aeaa-fbcad7db7204
# ╠═fe3af7f1-bde9-4a27-99b6-665386b38af9
# ╟─081ccb66-0b04-41b1-bae5-9d3e1f9b5c69
# ╠═b86dc4a6-3ac2-4fb7-97c8-654220ed3df1
# ╠═37e4a4d1-99a7-49ff-8daf-6b204aa4a3b5
# ╠═91cb0aa8-3c44-4f3d-a6ca-db599da2fa8f
# ╠═241457ec-98aa-4dc7-b647-fa5a2de4b4e3
# ╟─be526f69-f739-4372-b1c2-23cc252ed865
# ╠═0556e867-84a4-4632-b341-7c16b7fed6a1
# ╠═b6db627a-5f7e-4215-87ed-e9114535945f
# ╠═2b38ad29-7634-43d2-8fd0-b0f6eb48d8f8
# ╠═655ee62b-39f9-40cc-999a-6b789582de11
# ╠═6b996fea-2c6b-483d-8aaa-7da0e7c72100
# ╠═a1bc646a-fbe8-4fd8-8d02-254e5dc37ab7
# ╠═291a37f7-4e62-4249-ac3c-23ae5081cd43
# ╠═fabb56ea-369b-4724-9744-ab037627f58e
# ╠═650fe0e7-601c-4534-98c5-071298881484
